import 'dart:io';

import 'package:dart_style/dart_style.dart';

import '../../commons/consts.dart';
import '../../commons/entities/project_configuration.dart';
import '../../commons/functions/get_latest_package_version.dart';
import '../../commons/functions/snake_to_pascal_case.dart';
import '../../commons/functions/version.dart';
import 'create_route.dart';

const _gitignore = """
# See https://www.dartlang.org/guides/libraries/private-files

# Files and directories created by pub
.dart_tool/
.packages
build/
# If you're building an application, you may want to check-in your pubspec.lock
pubspec.lock

# Directory created by dartdoc
# If you don't generate documentation locally you can remove this line.
doc/api/

# dotenv environment variables file
.env*

# Avoid committing generated Javascript files:
*.dart.js
*.info.json      # Produced by the --dump-info flag.
*.js             # When generated by dart2js. Don't specify *.js if your
                 # project includes source files written in JavaScript.
*.js_
*.js.deps
*.js.map

.flutter-plugins
.flutter-plugins-dependencies

# Gazelle temporary files
.tmp/
""";

String _getMainFile({
  required String routeImportPath,
  required String routeName,
  required String projectName,
}) =>
    """
import 'package:gazelle_core/gazelle_core.dart';
import 'package:models/models.dart';
import '$routeImportPath';

Future<void> runApp(List<String> args) async {
  final app = GazelleApp(
    routes: [
      $routeName,
    ],
    port: 3000,
    modelProvider: ${snakeToPascalCase(projectName)}ModelProvider(),
  );

  await app.start(args: args);
}
""";

String _getPubspecTemplate(String projectName, String gazelleCoreVersion) => """
name: $projectName 
description: A new Gazelle project.
version: 0.1.0
publish_to: "none"

environment:
  sdk: ^$dartSdkVersion

dependencies:
  gazelle_core: ^$gazelleCoreVersion
  models:
    path: ../models

dev_dependencies:
  lints: ">=2.1.0 <4.0.0"
  test: ^1.24.0
""";

String _getEntryPoint(String projectName) => """
import "package:$projectName/$projectName.dart" as $projectName;

Future<void> main(List<String> args) async {
  $projectName.runApp(args);
}
""";

/// Creates the server for a Gazelle project
Future<String> createServer({
  required final ProjectConfiguration projectConfiguration,
}) async {
  final path = "${projectConfiguration.path}/server";
  final libPath = "$path/lib";
  final binPath = "$path/bin";

  final helloGazelleRoute = await createRoute(
    routeName: "hello_gazelle",
    projectConfiguration: projectConfiguration,
  );

  final main = _getMainFile(
    routeImportPath:
        helloGazelleRoute.routeFilePath.replaceAll(libPath, "").substring(1),
    routeName: helloGazelleRoute.routeName,
    projectName: projectConfiguration.name,
  );

  await Directory(path).create(recursive: true);

  final gazelleCoreVersion =
      await getLatestPackageVersion(gazelleCorePackageName);

  await File("$path/pubspec.yaml").create(recursive: true).then((file) =>
      file.writeAsString(_getPubspecTemplate("server", gazelleCoreVersion)));

  await File("$path/.gitignore")
      .create(recursive: true)
      .then((file) => file.writeAsString(_gitignore));

  await File("$libPath/server.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(DartFormatter().format(main)));

  await File("$binPath/server.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getEntryPoint("server")));

  await Process.run(
    "dart",
    ["pub", "get"],
    workingDirectory: "$path/",
  );

  return path;
}
