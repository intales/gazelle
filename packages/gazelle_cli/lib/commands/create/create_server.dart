import 'dart:io';

import 'package:dart_style/dart_style.dart';

import '../../commons/functions/version.dart';
import 'create_route.dart';

const _gitignore = """
# See https://www.dartlang.org/guides/libraries/private-files

# Files and directories created by pub
.dart_tool/
.packages
build/
# If you're building an application, you may want to check-in your pubspec.lock
pubspec.lock

# Directory created by dartdoc
# If you don't generate documentation locally you can remove this line.
doc/api/

# dotenv environment variables file
.env*

# Avoid committing generated Javascript files:
*.dart.js
*.info.json      # Produced by the --dump-info flag.
*.js             # When generated by dart2js. Don't specify *.js if your
                 # project includes source files written in JavaScript.
*.js_
*.js.deps
*.js.map

.flutter-plugins
.flutter-plugins-dependencies

# Gazelle temporary files
.tmp/
""";

String _getMainFile({
  required String routeImportPath,
  required String routeName,
}) =>
    """
import 'package:gazelle_core/gazelle_core.dart';
import '$routeImportPath';

Future<void> runApp(List<String> args) async {
  final app = GazelleApp(
    routes: [
      $routeName,
    ],
  );

  if (args.contains("--export-routes")) {
    await app.start(mode: GazelleAppMode.exportRoutes);
    return;
  }

  await app.start();
  print("Gazelle listening at \${app.serverAddress}");
}
""";

String _getPubspecTemplate(String projectName) => """
name: $projectName 
description: A new Gazelle project.
version: 0.1.0
publish_to: "none"

environment:
  sdk: ^$dartSdkVersion

dependencies:
  gazelle_core: ^0.4.0
  models:
    path: ../models

dev_dependencies:
  lints: ">=2.1.0 <4.0.0"
  test: ^1.24.0
""";

String _getEntryPoint(String projectName) => """
import "package:$projectName/$projectName.dart" as $projectName;

Future<void> main(List<String> args) async {
  $projectName.runApp(args);
}
""";

/// Creates the server for a Gazelle project
Future<String> createServer({
  required String path,
}) async {
  const projectName = "server";
  final libPath = "$path/lib";
  final binPath = "$path/bin";

  final helloGazelleRoute = await createRoute(
    routeName: "hello_gazelle",
    path: libPath,
  );

  final main = _getMainFile(
    routeImportPath:
        helloGazelleRoute.routeFilePath.replaceAll(libPath, "").substring(1),
    routeName: helloGazelleRoute.routeName,
  );

  await Directory(path).create(recursive: true);

  await File("$path/pubspec.yaml")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getPubspecTemplate(projectName)));

  await File("$path/.gitignore")
      .create(recursive: true)
      .then((file) => file.writeAsString(_gitignore));

  await File("$libPath/$projectName.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(DartFormatter().format(main)));

  await File("$binPath/$projectName.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getEntryPoint(projectName)));

  await Process.run(
    "dart",
    ["pub", "get"],
    workingDirectory: "$path/",
  );

  return path;
}
