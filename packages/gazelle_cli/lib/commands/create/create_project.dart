import 'dart:io';

import '../../commons/functions/version.dart';

const _gitignore = """
# See https://www.dartlang.org/guides/libraries/private-files

# Files and directories created by pub
.dart_tool/
.packages
build/
# If you're building an application, you may want to check-in your pubspec.lock
pubspec.lock

# Directory created by dartdoc
# If you don't generate documentation locally you can remove this line.
doc/api/

# dotenv environment variables file
.env*

# Avoid committing generated Javascript files:
*.dart.js
*.info.json      # Produced by the --dump-info flag.
*.js             # When generated by dart2js. Don't specify *.js if your
                 # project includes source files written in JavaScript.
*.js_
*.js.deps
*.js.map

.flutter-plugins
.flutter-plugins-dependencies
""";

const _mainTemplate = """
import 'package:gazelle_core/gazelle_core.dart';

Future<void> runApp(List<String> args) async {
  final app = GazelleApp(
    routes: [
      GazelleRoute(
        name: "hello_gazelle",
        get: (context, request, response) => GazelleResponse(
          statusCode: GazelleHttpStatusCode.success.ok_200,
          body: "Hello, Gazelle!",
        ),
      ),
    ],
  );

  await app.start();
  print("Gazelle listening at \${app.serverAddress}");
}
""";

String _getPubspecTemplate(String projectName) => """
name: $projectName 
description: A new Gazelle project.
version: 0.1.0

environment:
  sdk: ^$dartSdkVersion

dependencies:
  gazelle_core: ^0.3.0

dev_dependencies:
  lints: ">=2.1.0 <4.0.0"
  test: ^1.24.0
""";

String _getEntryPoint(String projectName) => """
import "package:$projectName/$projectName.dart" as $projectName;

Future<void> main(List<String> args) async {
  $projectName.runApp(args);
}
""";

/// Represents an error during the creation process of a new project.
class CreateProjectError {
  /// The error message.
  final String message;

  /// Creates a [CreateProjectError].
  const CreateProjectError() : message = "Project already exists!";
}

/// Creates a new Gazelle project.
///
/// Throws a [CreateProjectError] if project already exists.
Future<String> createProject({
  required String projectName,
  required String path,
}) async {
  final projectPath = "$path/$projectName";
  if (await Directory(projectPath).exists()) {
    throw CreateProjectError();
  }

  final libPath = "$projectPath/lib";
  final binPath = "$projectPath/bin";

  final projectNameParts = projectName.split("_");

  String codeProjectName = "";
  for (var i = 0; i < projectNameParts.length; i++) {
    final part = projectNameParts[i];
    if (i == 0) {
      codeProjectName += part.toLowerCase();
      continue;
    }
    codeProjectName += "${part[0].toUpperCase()}${part.substring(1)}";
  }

  await Directory(projectPath).create(recursive: true);

  await File("$projectPath/pubspec.yaml")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getPubspecTemplate(codeProjectName)));

  await File("$projectPath/.gitignore")
      .create(recursive: true)
      .then((file) => file.writeAsString(_gitignore));

  await File("$libPath/$projectName.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_mainTemplate));

  await File("$binPath/$projectName.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getEntryPoint(codeProjectName)));

  await Process.run(
    "dart",
    ["pub", "get"],
    workingDirectory: "$projectPath/",
  );

  return projectPath;
}
