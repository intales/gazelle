import 'dart:io';

const _gitignore = """
# See https://www.dartlang.org/guides/libraries/private-files

# Files and directories created by pub
.dart_tool/
.packages
build/
# If you're building an application, you may want to check-in your pubspec.lock
pubspec.lock

# Directory created by dartdoc
# If you don't generate documentation locally you can remove this line.
doc/api/

# dotenv environment variables file
.env*

# Avoid committing generated Javascript files:
*.dart.js
*.info.json      # Produced by the --dump-info flag.
*.js             # When generated by dart2js. Don't specify *.js if your
                 # project includes source files written in JavaScript.
*.js_
*.js.deps
*.js.map

.flutter-plugins
.flutter-plugins-dependencies
""";

const _mainTemplate = """
import 'package:gazelle_core/gazelle_core.dart';

Future<void> runApp(List<String> args) async {
  final app = GazelleApp(port: 8080);

  app.get("/", (request, response) async {
    return response.copyWith(
      statusCode: 200,
      body: "Hello, Gazelle!",
    );
  });

  await app.start();
  print('Server is running at http://\${app.address}:\${app.port}');
}
""";

String _getPubspecTemplate(String projectName) => """
name: $projectName 
description: A new Gazelle project.
version: 0.1.0

environment:
  sdk: ^3.0.0

dependencies:
  gazelle_core: ^0.2.0

dev_dependencies:
  lints: ">=2.1.0 <4.0.0"
  test: ^1.24.0
""";

String _getEntryPoint(String projectName) => """
import "package:$projectName/$projectName.dart" as $projectName;

Future<void> main(List<String> args) async {
  $projectName.runApp(args);
}
""";

/// Represents an error during the creation process of a new project.
class CreateProjectError {
  /// The error message.
  final String message;

  /// Creates a [CreateProjectError].
  const CreateProjectError() : message = "Project already exists!";
}

/// Creates a new Gazelle project.
///
/// Throws a [CreateProjectError] if project already exists.
Future<String> createProject(
  String projectName, {
  String? path,
}) async {
  final nameOption = projectName;
  final pathOption = path;

  final completePath =
      pathOption != null ? "$pathOption/$nameOption" : nameOption;
  if (await Directory(completePath).exists()) {
    throw CreateProjectError();
  }

  await Directory(completePath).create(recursive: true);

  await File("$completePath/pubspec.yaml")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getPubspecTemplate(nameOption)));

  await File("$completePath/.gitignore")
      .create(recursive: true)
      .then((file) => file.writeAsString(_gitignore));

  await File("$completePath/lib/$nameOption.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_mainTemplate));

  await File("$completePath/bin/$nameOption.dart")
      .create(recursive: true)
      .then((file) => file.writeAsString(_getEntryPoint(nameOption)));

  await Process.run(
    "dart",
    ["pub", "get"],
    workingDirectory: "$completePath/",
  );

  return completePath;
}
